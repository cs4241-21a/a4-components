{"version":3,"sources":["components/Todoinput.tsx","components/Todoitem.tsx","components/Datatable.tsx","components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todoinput","addTodo","useState","text","setText","savings","setSavings","costs","setCosts","className","type","placeholder","onChange","e","target","value","onClick","id","Date","getTime","cost","json","name","parseInt","balance","body","JSON","stringify","fetch","method","headers","then","response","alert","result","Todoitem","todo","num1","num2","Datatable","todolistdom","todoList","map","item","Todo","setTodolist","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNA0FeA,EAjFG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QACnB,EAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAQG,EAAR,KAAiBC,EAAjB,KACA,EAA2BJ,mBAAS,IAApC,mBAAQK,EAAR,KAAeC,EAAf,KA+CA,OACE,sBAAKC,UAAU,aAAf,UACE,kCACE,+BACE,uCACA,6BACE,uBAAOC,KAAK,OAAOC,YAAY,0BAA0BC,SAnD1C,SAACC,GAExBT,EAASS,EAAEC,OAA4BC,QAiDsDA,MAAOZ,SAIhG,+BACE,0CACA,6BACE,uBAAOO,KAAK,OAAOC,YAAY,4BAA4BC,SArDzC,SAACC,GAE3BP,EAAYO,EAAEC,OAA4BC,QAmDwDA,MAAOV,SAIrG,+BACE,uCACE,6BACE,uBAAOK,KAAK,OAAOC,YAAY,4BAA4BC,SAvD7C,SAACC,GAEzBL,EAAUK,EAAEC,OAA4BC,QAqD0DA,MAAOR,YAIvG,wBAAQS,QArDU,WAIpBf,EAAQ,CACNgB,IAAI,IAAIC,MAAOC,UACfhB,KAAMA,EACNE,QAASA,EACTe,KAAMb,IAERH,EAAQ,IACRE,EAAW,IACXE,EAAS,IAET,IAAIa,EAAO,CAAEJ,IAAI,IAAIC,MAAOC,UAAWG,KAAMnB,EAAME,QAASkB,SAASlB,GAAUe,KAAMG,SAAShB,GAAQiB,QAASD,SAASlB,GAAWkB,SAAShB,IAC5IkB,EAAOC,KAAKC,UAAWN,GAGvBO,MAAM,4BAA6B,CACjCC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BL,SAEDM,MAAM,SAAAC,GAAQ,OAAIA,EAASX,UAC3BU,MAAM,SAAAV,GACLY,MAAMZ,EAAKa,YA4BX,qBC/DSC,EAbE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KACbC,EAAOd,SAASa,EAAK/B,SACrBiC,EAAOf,SAASa,EAAKhB,MACzB,OACE,+BACE,mCAAMgB,EAAKjC,KAAX,OACA,mCAAMiC,EAAK/B,QAAX,OACA,mCAAM+B,EAAKhB,KAAX,OACA,mCAAMiB,EAAKC,EAAX,WCYSC,G,MAhBG,SAAC,GAA0B,IAEvCC,EAFsC,EAAvBC,SAEQC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAwBP,KAAMO,GAAfA,EAAK1B,OAE3D,OACE,sBAAKR,UAAU,aAAf,UACE,wBAAOQ,GAAG,YAAV,UACE,+BAAI,sCAAa,yCAAgB,sCAAa,4CAC9C,+BAAI,uCAAc,oCAAW,mCAAU,uCACrCuB,KAEJ,uBAAM,4BCYGI,EAvBF,WAEX,MAAgC1C,mBAAuB,IAAvD,mBAAOuC,EAAP,KAAiBI,EAAjB,KAWA,OACE,sBAAKpC,UAAU,OAAf,UACE,uCACA,cAAC,EAAD,CAAWgC,SAAUA,IACrB,uBACA,cAAC,EAAD,CAAWxC,QATC,SAACmC,GACfS,EAAY,GAAD,mBAAKJ,GAAL,CAAeL,YCPfU,MAXf,WACE,OACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,OCQSsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.203e80a1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { StateProps } from './Todo';\nimport './Todoinput.css';\n  \n// like interface in java, declare addTodo which returns void\ninterface IProp {\n  addTodo: (todo: StateProps) => void;\n}\n\nconst Todoinput = ({ addTodo }: IProp) => {\n  const [ text, setText ] = useState('');\n  const [ savings, setSavings ] = useState('');\n  const [ costs, setCosts] = useState('');\n  // get the value of input\n  const changeTextHolder = (e: React.ChangeEvent) => {\n    // we tell the system that e is a HTMLInputElement, so it has a value that you can achieve\n    setText((e.target as HTMLInputElement).value);\n  }\n  // get the value of savings\n  const changeSavingsHolder = (e: React.ChangeEvent) => {\n    // we tell the system that e is a HTMLInputElement, so it has a value that you can achieve\n    setSavings((e.target as HTMLInputElement).value);\n  }\n  // get the value of cost\n  const changeCostsHolder = (e: React.ChangeEvent) => {\n    // we tell the system that e is a HTMLInputElement, so it has a value that you can achieve\n    setCosts((e.target as HTMLInputElement).value);\n  }\n\n  // when click the button, this function will run\n  const addTodoHolder = () => {\n    //console.log(text);\n    //console.log(savings);\n    \n    addTodo({\n      id: new Date().getTime(),\n      text: text,\n      savings: savings,\n      cost: costs\n    });\n    setText('');\n    setSavings('');\n    setCosts('');\n\n    var json = { id: new Date().getTime(), name: text, savings: parseInt(savings), cost: parseInt(costs), balance: parseInt(savings) - parseInt(costs) },\n    body = JSON.stringify( json );\n    // console.log(body);\n\n    fetch('http://localhost:5000/add', {\n      method: 'POST',\n      headers: { 'Content-Type': \"application/json\" },\n      body\n    })\n    .then( response => response.json() )\n    .then( json => {\n      alert(json.result);\n    })\n  }\n\n  return (\n    <div className=\"Todo-input\">\n      <table>\n        <tr>\n          <td>Name:</td>\n          <td>\n            <input type=\"text\" placeholder=\"please enter name here!\" onChange={changeTextHolder} value={text}/>\n          </td>\n        </tr>\n          \n        <tr>\n          <td>Savings:</td>\n          <td>\n            <input type=\"text\" placeholder=\"please enter number here!\" onChange={changeSavingsHolder} value={savings}/>\n          </td>\n        </tr>\n        \n        <tr>\n          <td>Cost:</td>\n            <td>\n              <input type=\"text\" placeholder=\"please enter number here!\" onChange={changeCostsHolder} value={costs}/>\n            </td>\n        </tr>\n      </table>\n      <button onClick={addTodoHolder}>add</button>\n    </div>\n  )\n}\n\n\n\nexport default Todoinput;","import React from \"react\";\nimport { StateProps } from './Todo';\n\ninterface IProps {\n  todo: StateProps;\n}\n\nconst Todoitem = ({todo}: IProps) => {\n  var num1 = parseInt(todo.savings);\n  var num2 = parseInt(todo.cost);\n  return (\n    <tr>\n      <td> {todo.text} </td>\n      <td> {todo.savings} </td>\n      <td> {todo.cost} </td>\n      <td> {num1-num2} </td>\n    </tr>\n  )\n}\n\nexport default Todoitem;","import React from \"react\";\nimport Todoitem from \"./Todoitem\";\nimport { StateProps } from './Todo';\nimport './Datatable.css';\n\n\ninterface Iprops {\n  todoList: StateProps[];\n}\n\n// must tell it what data it will achieve\nconst Datatable = ({ todoList }: Iprops) => {\n  // get each item from it, using traverse\n  var todolistdom = todoList.map(item => <Todoitem key={item.id} todo={item}/>);\n\n  return (\n    <div className=\"Data-table\">\n      <table id=\"dataTable\">\n        <tr><th>Name</th><th>Savings</th><th>Cost</th><th>Balance</th></tr>\n        <tr><td>jerry</td><td>12</td><td>1</td><td>11</td></tr>\n        { todolistdom }\n      </table>\n      <br /><br />\n    </div>\n  )\n}\n\nexport default Datatable;","import React, { useState } from \"react\";\nimport Todoinput from \"./Todoinput\";\nimport Datatable from \"./Datatable\";\n\nexport interface StateProps {\n  id: number;\n  text: string;\n  savings: string;\n  cost: string;\n}\n\nconst Todo = () => {\n  // saying that todoList is an array similar to StateProps\n  const [todoList, setTodolist] = useState<StateProps[]>([]);\n  \n  // change the state\n  //const changeTodo = (id: number) => {\n  //}\n\n  // add data\n  const addTodo = (todo: StateProps) => {\n    setTodolist([...todoList, todo]);\n  }\n\n  return (\n    <div className=\"todo\">\n      <b>Table:</b>\n      <Datatable todoList={todoList}/>\n      <br />\n      <Todoinput addTodo={addTodo} />\n    </div>\n  )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}